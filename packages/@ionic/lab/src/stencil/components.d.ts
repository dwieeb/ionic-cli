/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  App as IonlabApp
} from './components/ionlab-app/ionlab-app';

declare global {
  interface HTMLIonlabAppElement extends IonlabApp, HTMLElement {
  }
  var HTMLIonlabAppElement: {
    prototype: HTMLIonlabAppElement;
    new (): HTMLIonlabAppElement;
  };
  interface HTMLElementTagNameMap {
    "ionlab-app": HTMLIonlabAppElement;
  }
  interface ElementTagNameMap {
    "ionlab-app": HTMLIonlabAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionlab-app": JSXElements.IonlabAppAttributes;
    }
  }
  namespace JSXElements {
    export interface IonlabAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  DeviceFrame as IonlabDeviceFrame
} from './components/ionlab-device-frame/ionlab-device-frame';

declare global {
  interface HTMLIonlabDeviceFrameElement extends IonlabDeviceFrame, HTMLElement {
  }
  var HTMLIonlabDeviceFrameElement: {
    prototype: HTMLIonlabDeviceFrameElement;
    new (): HTMLIonlabDeviceFrameElement;
  };
  interface HTMLElementTagNameMap {
    "ionlab-device-frame": HTMLIonlabDeviceFrameElement;
  }
  interface ElementTagNameMap {
    "ionlab-device-frame": HTMLIonlabDeviceFrameElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionlab-device-frame": JSXElements.IonlabDeviceFrameAttributes;
    }
  }
  namespace JSXElements {
    export interface IonlabDeviceFrameAttributes extends HTMLAttributes {
      icon?: string;
      platform?: string;
      platformName?: string;
      url?: string;
    }
  }
}


import {
  PlatformDropdown as IonlabPlatformDropdown
} from './components/ionlab-platform-dropdown/ionlab-platform-dropdown';

declare global {
  interface HTMLIonlabPlatformDropdownElement extends IonlabPlatformDropdown, HTMLElement {
  }
  var HTMLIonlabPlatformDropdownElement: {
    prototype: HTMLIonlabPlatformDropdownElement;
    new (): HTMLIonlabPlatformDropdownElement;
  };
  interface HTMLElementTagNameMap {
    "ionlab-platform-dropdown": HTMLIonlabPlatformDropdownElement;
  }
  interface ElementTagNameMap {
    "ionlab-platform-dropdown": HTMLIonlabPlatformDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionlab-platform-dropdown": JSXElements.IonlabPlatformDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface IonlabPlatformDropdownAttributes extends HTMLAttributes {
      activePlatforms?: string[];
    }
  }
}


import {
  Preview as IonlabPreview
} from './components/ionlab-preview/ionlab-preview';

declare global {
  interface HTMLIonlabPreviewElement extends IonlabPreview, HTMLElement {
  }
  var HTMLIonlabPreviewElement: {
    prototype: HTMLIonlabPreviewElement;
    new (): HTMLIonlabPreviewElement;
  };
  interface HTMLElementTagNameMap {
    "ionlab-preview": HTMLIonlabPreviewElement;
  }
  interface ElementTagNameMap {
    "ionlab-preview": HTMLIonlabPreviewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionlab-preview": JSXElements.IonlabPreviewAttributes;
    }
  }
  namespace JSXElements {
    export interface IonlabPreviewAttributes extends HTMLAttributes {
      activeDevices?: string[];
      url?: string;
    }
  }
}


import {
  Sidebar as IonlabSidebar
} from './components/ionlab-sidebar/ionlab-sidebar';

declare global {
  interface HTMLIonlabSidebarElement extends IonlabSidebar, HTMLElement {
  }
  var HTMLIonlabSidebarElement: {
    prototype: HTMLIonlabSidebarElement;
    new (): HTMLIonlabSidebarElement;
  };
  interface HTMLElementTagNameMap {
    "ionlab-sidebar": HTMLIonlabSidebarElement;
  }
  interface ElementTagNameMap {
    "ionlab-sidebar": HTMLIonlabSidebarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionlab-sidebar": JSXElements.IonlabSidebarAttributes;
    }
  }
  namespace JSXElements {
    export interface IonlabSidebarAttributes extends HTMLAttributes {
      visible?: boolean;
    }
  }
}


import {
  SpinKitFadingCircle as SkFadingCircle
} from './components/sk-fading-circle/sk-fading-circle';

declare global {
  interface HTMLSkFadingCircleElement extends SkFadingCircle, HTMLElement {
  }
  var HTMLSkFadingCircleElement: {
    prototype: HTMLSkFadingCircleElement;
    new (): HTMLSkFadingCircleElement;
  };
  interface HTMLElementTagNameMap {
    "sk-fading-circle": HTMLSkFadingCircleElement;
  }
  interface ElementTagNameMap {
    "sk-fading-circle": HTMLSkFadingCircleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sk-fading-circle": JSXElements.SkFadingCircleAttributes;
    }
  }
  namespace JSXElements {
    export interface SkFadingCircleAttributes extends HTMLAttributes {
      
    }
  }
}

